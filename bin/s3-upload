#!/usr/bin/bash
#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

# Disable complaint about double quoting to prevent globbing and word splitting
# shellcheck disable=SC2086

usage(){
    echo "Usage: $0 JSON_IUF_CONTENT_META PARENT_PATH"
    echo "Uploads S3 image(s) from the location(s) specified within the product directory"
    exit 0 # Without error since the parameter may not have been included.
}

# usage: process PATH BUCKET KEY
#
# Uploads the object at PATH with key KEY to the BUCKET in S3
#
# The following arguments are required:
#
#   PATH   - The source PATH for the file to be uploaded
#   BUCKET - The bucket in S3 where the file at PATH will be stored
#   KEY    - The key for the uploaded object
#

process(){
    local local_path="$1"
    local bucket="$2"
    local key="$3"

    if [[ ! -f "$local_path" ]]; then
        echo "ERROR $0: Invalid path $local_path provided in the manifest"
        echo "ERROR Skipping the S3 upload operation for $local_path"
        return 1
    fi
    # test -f with no arguments exits with 0. Also verify the var isn't empty.
    if [[ -z "$local_path" ]]; then
        echo "ERROR $0: Local path of the object to be uploaded was empty"
        echo "ERROR Skipping the S3 upload operation (bucket: $bucket, key: $key)"
        return 1
    fi

    if [[ -z "$bucket" ]]; then
        echo "ERROR Found empty S3 bucket parameter"
        echo "ERROR Skipping the S3 upload operation for $local_path"
        return 1
    elif [[ "${bucket,,}" == "null" ]]; then # jq will assign "null" is the element is missing
        echo "ERROR Missing S3 bucket parameter"
        echo "ERROR Skipping the S3 upload operation for $local_path"
        return 1
    fi

    if [[ -z "$key" ]]; then
        echo "ERROR Found empty S3 key parameter"
        echo "ERROR Skipping the S3 upload operation for $local_path"
        return 1
    elif [[ "${key,,}" == "null" ]]; then # jq will assign "null" is the element is missing
        echo "ERROR The S3 'key' parameter is missing"
        echo "ERROR Skipping the S3 upload operation for $local_path"
        return 1
    fi

    result=$(cray artifacts create $bucket $key $local_path 2>&1)
    if [ $? -ne 0 ]; then
        echo "ERROR Error uploading to S3"
        result=$(echo "$result" | sed -e 's/^/DEBUG /')
        echo -e "DEBUG <cray artifacts create $bucket $key $local_path> failed with\n\n$result"
        return 1
    else
        echo "INFO Successfully created s3://$bucket/$key for $local_path"
        return 0
    fi
}

# When called by Argo, this is the one expected argument with the content from
# the manifest.
if [[ $# -lt 2 ]]; then
    echo "ERROR $0: Did not receive the expected number of arguments. The arguments expected are - 1.IUF product manifest 2.Directory location where product tarball is extracted. Arguments passed were: $@"
    echo "ERROR Skipping S3-upload operation"
    usage
fi

# Although the manifest data is yaml, it is passed in json format from Argo
# in this context.
JSON_CONTEXT="$1"
PARENT_PATH="$2"
S3_ENTRIES=$(echo "$JSON_CONTEXT" | jq '.content.s3 | length')

if [[ -z "$S3_ENTRIES" ]]; then
    echo "ERROR Did not receive any S3 context in the manifest provided. Exiting s3-upload operation"
    exit 1
fi

err=0
for (( i=0; i< S3_ENTRIES; i++ )); do
    LOCAL_PATH="$PARENT_PATH"/$(echo "$JSON_CONTEXT" | jq -r '.content.s3['$i'].path')
    S3_BUCKET=$(echo "$JSON_CONTEXT" | jq -r '.content.s3['$i'].bucket')
    S3_KEY=$(echo "$JSON_CONTEXT" | jq -r '.content.s3['$i'].key')
    echo "DEBUG Processing file at $LOCAL_PATH (s3_bucket=$S3_BUCKET s3_key=$S3_KEY)"
    # Attempt to process all of the s3 content. Exit at the end with non-zero if any
    # errors are detected. The Argo log will therefore have all errors associated with
    # this operation for review.
    if ! process "$LOCAL_PATH" "$S3_BUCKET" "$S3_KEY"; then
        err=1
    fi
done
exit $err
