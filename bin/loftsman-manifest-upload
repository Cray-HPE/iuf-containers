#!/usr/bin/bash
#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

# Disable complaint about double quoting to prevent globbing and word splitting
# shellcheck disable=SC2086

set -eou pipefail

usage(){
    echo "Usage: $0 JSON_IUF_CONTENT_META PARENT_PATH PRODUCT_NAME"
    echo "Uploads Loftsman manifest(s) from the location(s) specified within the product directory"
    exit 0 # Without error since the parameter may not have been included.
}

# usage: process MANIFEST_PATH USE_MANIFESTGEN
#
# Uploads the loftsman manifests in MANIFEST_PATH after optionally processing with manifestgen.
#
# The following arguments are required:
#
#   MANIFEST_PATH    - The source directory for the manifest(s) to be uploaded, or the actual manifest.
#   USE_MANIFESTGEN - Whether to run the manifest through manifestgen

process(){
    local manifest_path="$1"
    local use_manifestgen="$2"
    local manifest
    local manifest_files
    local name

    if [[ -z "$manifest_path" ]]; then
        echo "ERROR $0: path was not provided"
        echo "ERROR Skipping the loftsman manifest upload operation"
        return 1
    fi

    if [[ -z "$use_manifestgen" ]]; then
        echo "ERROR Found empty use_manifestgen parameter"
        echo "ERROR Skipping the loftsman manifest upload operation for $manifest_path"
        return 1
    elif [[ "${use_manifestgen,,}" == "null" ]]; then # jq will assign "null" is the element is missing
        echo "ERROR The loftsman use_manifestgen parameter is missing."
        echo "ERROR Skipping the loftsman manifest upload operation for $manifest_path"
        return 1
    fi

    # Is $manifest_path a directory?
    if [[ -d "$manifest_path" ]]; then
        manifest_files=$(ls "$manifest_path"/*.yml "$manifest_path"/*.yaml 2>/dev/null)
        for manifest in $manifest_files; do
            if [[ "$use_manifestgen" = "true" ]] || [[ "$use_manifestgen" = "True" ]]; then
                cp $manifest /tmp/
                name=/tmp/$(basename $manifest)
                if ! manifestgen -i "$name" -c $CUSTOMIZATIONS_YAML -o $manifest; then
                    echo "ERROR manifestgen failed"
                    rm -f $name
                    exit 1
                fi
                rm -f $name
            fi
            if ! cray artifacts create config-data argo/loftsman/$PRODUCT_NAME/$PRODUCT_VERSION/manifests/"$(basename $manifest)" $manifest; then
                echo "ERROR failed to create s3://config-data/argo/loftsman/$PRODUCT_NAME/$PRODUCT_VERSION/manifests/$(basename $manifest)"
                exit 1
            else
                echo "NOTICE successfully created s3://config-data/argo/loftsman/$PRODUCT_NAME/$PRODUCT_VERSION/manifests/$(basename $manifest)"
            fi
        done
    # or is it a file?
    elif [[ -f "$manifest_path" ]]; then
        if [[ "$use_manifestgen" = "true" ]] || [[ "$use_manifestgen" = "True" ]]; then
            cp $manifest_path /tmp/
            name=/tmp/"$(basename $manifest_path)"
            if ! manifestgen -i $name -c $CUSTOMIZATIONS_YAML -o $manifest_path; then
                echo "ERROR manifestgen failed"
                rm -f $name
                exit 1
            fi
            rm -f $name
        fi
        if ! cray artifacts create config-data argo/loftsman/$PRODUCT_NAME/$PRODUCT_VERSION/manifests/"$(basename $manifest_path)" "$manifest_path"; then
            echo "ERROR Error uploading to S3"
            return 1
        else
            echo "NOTICE successfully created s3://config-data/argo/loftsman/$PRODUCT_NAME/$PRODUCT_VERSION/manifests/$(basename $manifest_path)"
            return 0
        fi
    else
        echo "ERROR $0: Invalid path \"$manifest_path\""
        echo "ERROR Skipping the loftsman manifest upload operation for $manifest_path"
        return 1
    fi
}

# When called by Argo, this is the one expected argument with the content from
# the manifest.
if [[ $# -lt 3 ]]; then
    echo "ERROR Did not receive the expected number of arguments."
    echo "ERROR Skipping this operation."
    usage
fi

# Although the manifest data is yaml, it is passed in json format from Argo
# in this context.
JSON_CONTEXT="$1"
PARENT_PATH="$2"
PRODUCT_NAME="$3"
LOFTSMAN_ENTRIES=$(echo "$JSON_CONTEXT" | jq '.content.loftsman | length')
CUSTOMIZATIONS_YAML=/tmp/customizations.yaml

if [[ -z "$LOFTSMAN_ENTRIES" ]]; then
    echo "ERROR Did not receive any loftsman context."
    exit 1
fi

PRODUCT_VERSION=$(echo "$JSON_CONTEXT" | jq -r '.version')
if [[ "${PRODUCT_VERSION,,}" == "null" ]] || [[ -z "$PRODUCT_VERSION" ]]; then
    echo "ERROR product version not found in manifest"
    exit 1
fi

kubectl get secrets -n loftsman site-init -o jsonpath='{.data.customizations\.yaml}' | base64 -d > $CUSTOMIZATIONS_YAML

err=0
for (( i=0; i< LOFTSMAN_ENTRIES; i++ )); do
    MANIFEST_PATH="$PARENT_PATH"/$(echo "$JSON_CONTEXT" | jq -r '.content.loftsman['$i'].path')
    USE_MANIFESTGEN=$(echo "$JSON_CONTEXT" | jq -r '.content.loftsman['$i'].use_manifestgen')
    echo "Processing manifest(s) at the following path: $MANIFEST_PATH (use_manifestgen=$USE_MANIFESTGEN)"
    # Attempt to process all of the loftsman manifest content. Exit at the end with non-zero if any
    # errors are detected. The Argo log will therefore have all errors associated with
    # this operation for review.
    if ! process "$MANIFEST_PATH" "$USE_MANIFESTGEN"; then
        err=1
    fi
done
exit $err
