#!/usr/bin/bash
#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

# Disable complaint about double quoting to prevent globbing and word splitting
# shellcheck disable=SC2086

set -eou pipefail

usage(){
    echo "Usage: $0 JSON_IUF_CONTENT_META"
    echo "Uploads Loftsman manifest(s) from the location(s) specified within the product directory"
    exit 0 # Without error since the parameter may not have been included.
}

# usage: process MANIFEST_DIR USE_MANIFESTGEN
#
# Uploads the loftsman manifests in MANIFEST_DIR after optionally processing with manifestgen.
#
# The following arguments are required:
#
#   MANIFEST_DIR    - The source directory for the manifest(s) to be uploaded
#   USE_MANIFESTGEN - Whether to run the manifest through manifestgen

process(){
    local manifest_dir="$1"
    local use_manifestgen="$2"
    local manifest

    if [[ ! -d "$manifest_dir" ]]; then
        echo "$0: Invalid path $manifest_dir or $manifest_dir is not a directory"
        echo "Skipping the loftsman manifest upload operation for $manifest_dir"
        return 1
    fi
    # test -d with no arguments exits with 0. Also verify the var isn't empty.
    if [[ -z "$manifest_dir" ]]; then
        echo "$0: path was not provided"
        echo "Skipping the loftsman manifest upload operation (use_manifestgen: $use_manifestgen)"
        return 1
    fi

    if [[ -z "$use_manifestgen" ]]; then
        echo "Found empty use_manifestgen parameter"
        echo "Skipping the loftsman manifest upload operation for $manifest_dir"
        return 1
    elif [[ "${use_manifestgen,,}" == "null" ]]; then # jq will assign "null" is the element is missing
        echo "It appears that the loftsman use_manifestgen parameter is missing."
        echo "Skipping the loftsman manifest upload operation for $manifest_dir"
        return 1
    fi

    for manifest in "$manifest_dir"/*.yml "$manifest_dir"/*.yaml; do
        if [[ "$use_manifestgen" = "true" ]] || [[ "$use_manifestgen" = "True" ]]; then
            manifestgen -i $manifest -c $CUSTOMIZATIONS_YAML -o $manifest
        fi

        cray artifacts create config-data argo/loftsman/$PRODUCT_NAME/manifests/$manifest $manifest
    done

    return 0
}

# When called by Argo, this is the one expected argument with the content from
# the manifest.
if [[ $# -lt 2 ]]; then
    echo "Did not find loftsman context and/or product name in the IUF manifest."
    echo "Skipping this operation."
    usage
fi

# Although the manifest data is yaml, it is passed in json format from Argo
# in this context.
JSON_CONTEXT="$1"
PRODUCT_NAME="$2"
LOFTSMAN_ENTRIES=$(echo "$JSON_CONTEXT" | jq '.content.loftsman | length')
CUSTOMIZATIONS_YAML=/tmp/customizations.yaml

if [[ -z "$LOFTSMAN_ENTRIES" ]]; then
    echo "Did not receive any loftsman context."
    exit 0
fi

kubectl get secrets -n loftsman site-init -o jsonpath='{.data.customizations\.yaml}' | base64 -d > $CUSTOMIZATIONS_YAML

err=0
for (( i=0; i< LOFTSMAN_ENTRIES; i++ )); do
    MANIFEST_DIR=$(echo "$JSON_CONTEXT" | jq -r '.content.loftsman['$i'].path')
    USE_MANIFESTGEN=$(echo "$JSON_CONTEXT" | jq -r '.content.loftsman['$i'].use_manifestgen')
    echo "Processing manifests under $MANIFEST_DIR/ (use_manifestgen=$USE_MANIFESTGEN)"
    # Attempt to process all of the loftsman manifest content. Exit at the end with non-zero if any
    # errors are detected. The Argo log will therefore have all errors associated with
    # this operation for review.
    if ! process "$MANIFEST_DIR" "$USE_MANIFESTGEN"; then
        err=1
    fi
done
exit $err
